#!/usr/bin/env python3
# -*- coding: UTF-8 -*-
# Copyright (c) 2016 Andrei Tatar
# Copyright (c) 2018 Vrije Universiteit Amsterdam
#
# This program is licensed under the GPL2+.

import sys

import pyramses
from hammertime import fliptable
from hammertime import sim


class ClearNX(sim.ExploitModel):
    """Exploit that clears the NX bit in a PTE"""
    def check_page(self, vpage):
        useful = [x for x in vpage.pulldowns if x.byte_offset % 8 == 7 and x.mask == 0b10000000]
        return len(useful) > 0


class SetRW(sim.ExploitModel):
    """Exploit that sets the R/W bit making a page writable"""
    def check_page(self, vpage):
        useful = [x for x in vpage.pullups if x.byte_offset % 8 == 0 and x.mask == 0b00000010]
        return len(useful) > 0


class SetUS(sim.ExploitModel):
    """Exploit that sets the U/S bit making the page available from userspace"""
    def check_page(self, vpage):
        useful = [x for x in vpage.pullups if x.byte_offset % 8 == 0 and x.mask == 0b00000100]
        return len(useful) > 0


class FlipPFN(sim.ExploitModel):
    """Exploit that changes the PFN in a page table entry, redirecting memory accesses"""

    def __init__(self, totalmem=(8 << 30)):
        self.pfnbits = totalmem.bit_length() - 12

    def check_page(self, vpage):
        bits_left = self.pfnbits
        useful = [
            x for x in vpage.pullups | vpage.pulldowns
            if x.byte_offset % 8 == 1 and (x.mask & 0b11110000)
        ]
        bits_left -= 4
        off = 2
        while bits_left // 8 > 0:
            useful.extend(x for x in vpage.pullups | vpage.pulldowns if x.byte_offset == off)
            off += 1
            bits_left -= 8
        if bits_left:
            bmask = 2**bits_left - 1
            useful.extend(
                x for x in vpage.pullups | vpage.pulldowns
                if (x.byte_offset == off and (x.mask & bmask))
            )
        return len(useful) > 0


if __name__ == '__main__':
    if len(sys.argv) < 3:
        print("Missing arguments")
        print("usage: {} PROFILE_PATH MSYS_PATH [MEM_GB]".format(sys.argv[0]))
    else:
        ftbl = fliptable.Fliptable.load_file(sys.argv[1])
        msys = pyramses.MemorySystem()
        msys.load_file(sys.argv[2])
        est = sim.FliptableEstimator(ftbl, msys)
        print('ClearNX')
        est.run_exploit(ClearNX())
        est.print_stats()
        print('\nSetRW')
        est.run_exploit(SetRW())
        est.print_stats()
        print('\nSetUS')
        est.run_exploit(SetUS())
        est.print_stats()
        print('\nFlipPFN')
        if len(sys.argv) >= 4:
            sz = int(sys.argv[3]) << 30
            est.run_exploit(FlipPFN(sz))
            est.print_stats()
        else:
            print('Skipped, requires MEM_GB argument')
