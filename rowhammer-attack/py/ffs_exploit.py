#!/usr/bin/env python3
# -*- coding: UTF-8 -*-
# Copyright (c) 2016 Andrei Tatar
# Copyright (c) 2018 Vrije Universiteit Amsterdam
#
# This program is licensed under the GPL2+.


import sys

from hammertime import sim


class _PreciseFlipExploit(sim.ExploitModel):
    """Exploit that relies on finding one out of a precise list of bit flips"""
    # Default and fallback; override these
    pullups = set()
    pulldowns = set()

    def check_page(self, vpage):
        useful = (vpage.pullups & self.pullups) | (vpage.pulldowns & self.pulldowns)
        return len(useful) > 0


class APTSourcesFlip(_PreciseFlipExploit):

    # Taken from Ubuntu 15.04's /etc/apt/sources.list
    domains = {
    "us.archive.ubuntu.com" : {
        "indexes" : [326, 393, 539, 614, 888, 948, 1004, 1072, 1450, 1512, 1570, 1640, 2043, 2140],
        "variations" : [
            "us.archive.tbuntu.com", "us.archive.wbuntu.com", "us.archive.qbuntu.com",
            "us.archive.ebuntu.com", "us.archive.5buntu.com", "us.archive.ucuntu.com",
            "us.archive.ufuntu.com", "us.archive.ujuntu.com", "us.archive.uruntu.com",
            "us.archive.ubtntu.com", "us.archive.ubwntu.com", "us.archive.ubqntu.com",
            "us.archive.ubentu.com", "us.archive.ub5ntu.com", "us.archive.ubuotu.com",
            "us.archive.ubultu.com", "us.archive.ubujtu.com", "us.archive.ubuftu.com",
            "us.archive.ubunuu.com", "us.archive.ubunvu.com", "us.archive.ubunpu.com",
            "us.archive.ubundu.com", "us.archive.ubun4u.com", "us.archive.ubuntt.com",
            "us.archive.ubuntw.com", "us.archive.ubuntq.com", "us.archive.ubunte.com",
            "us.archive.ubunt5.com"
            ],
        },
    "security.ubuntu.com" : {
        "indexes" : [2234, 2307, 2376, 2442, 2504, 2572],
        "variations" : [
            "security.tbuntu.com", "security.wbuntu.com", "security.qbuntu.com",
            "security.ebuntu.com", "security.5buntu.com", "security.ucuntu.com",
            "security.ufuntu.com", "security.ujuntu.com", "security.uruntu.com",
            "security.ubtntu.com", "security.ubwntu.com", "security.ubqntu.com",
            "security.ubentu.com", "security.ub5ntu.com", "security.ubuotu.com",
            "security.ubultu.com", "security.ubujtu.com", "security.ubuftu.com",
            "security.ubunuu.com", "security.ubunvu.com", "security.ubunpu.com",
            "security.ubundu.com", "security.ubun4u.com", "security.ubuntt.com",
            "security.ubuntw.com", "security.ubuntq.com", "security.ubunte.com",
            "security.ubunt5.com"
            ],
        },
    }

    def _setup_flips(self):
        self.pullups = set()
        self.pulldowns = set()
        for dom, v in self.domains.items():
            dombytes = dom.encode('utf-8')
            idxs = [x % 0x1000 for x in v['indexes']]
            for var in (x.encode('utf-8') for x in v['variations']):
                diff = bytes(x ^ var[i] for i, x in enumerate(dombytes))
                doff = 0
                fmask = 0
                for i, b in enumerate(diff):
                    if b:
                        doff = i
                        fmask = b
                        break
                if dombytes > var:
                    self.pulldowns.update({
                        sim.PageBitFlip(byte_offset=x + doff, mask=fmask)
                        for x in idxs
                    })
                else:
                    self.pullups.update({
                        sim.PageBitFlip(byte_offset=x + doff, mask=fmask)
                        for x in idxs
                    })

    def __init__(self):
        self._setup_flips()



class GPGFlip(_PreciseFlipExploit):
    gpg_bit_offsets_down = [
        # 1->0
        54444, 54477, 54576, 54606, 54750, 55566, 55696, 55896, 56152, 56522, 56711,
        56747, 56764, 56989, 57193, 57362, 57696, 57858, 76774, 77062, 77287, 78053,
        78147, 79073, 79087, 79459, 80097, 80148, 80375,
    ]
    gpg_bit_offsets_up = [
        # 0->1
        56067,  55022, 54936, 80252, 56396, 77713, 77591, 78378, 56554,
        79732, 55531, 55106, 76514, 79364, 77263, 56068, 57035, 54661, 57102,
        78292, 54960, 76364, 55812, 55830
    ]

    pulldowns = {
        sim.PageBitFlip(byte_offset=((x // 8) % 0x1000), mask=(1 << (x % 8)))
        for x in gpg_bit_offsets_down
    }
    pullups = {
        sim.PageBitFlip(byte_offset=((x // 8) % 0x1000), mask=(1 << (x % 8)))
        for x in gpg_bit_offsets_up
    }


if __name__ == '__main__':
    if len(sys.argv) < 3:
        print("Missing arguments")
        print("usage: {} PROFILE_PATH MSYS_PATH".format(sys.argv[0]))
    else:
        print('GPGFlip')
        sim.FliptableEstimator.main(sys.argv[1], sys.argv[2], GPGFlip())
        print('\nAPT sources.list domain flip')
        sim.FliptableEstimator.main(sys.argv[1], sys.argv[2], APTSourcesFlip())

